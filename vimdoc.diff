diff --git a/runtime/doc/builtin.txt b/runtime/doc/builtin.txt
index 344dfdfd8..80b8a9cc4 100644
--- a/runtime/doc/builtin.txt
+++ b/runtime/doc/builtin.txt
@@ -1,4 +1,4 @@
-*builtin.txt*	For Vim version 9.1.  Last change: 2025 Feb 17
+*builtin.txt*	For Vim version 9.1.  Last change: 2025 Feb 23
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -1309,10 +1309,14 @@ blob2str({blob} [, {options}])				*blob2str()*
 		items:
 		    encoding	Decode the bytes in {blob} using this
 				encoding.  The value is a |String|.  See
-				|encoding-names| for the supported values.
+				|encoding-names| for the supported values
+				(plus the special value "none").
 							*E1515*
-		An error is given and an empty List is returned if
-		an invalid byte sequence is encountered in {blob},
+		When current 'encoding' is "utf-8", an error is given and an
+		empty List is returned if an invalid byte sequence is
+		encountered in {blob}.  To suppress this validation and get
+		potentially invalid string, set "encoding" in {options} to
+		"none".
 
 		Returns an empty List if blob is empty.
 
@@ -10645,7 +10649,8 @@ str2blob({list} [, {options}])					*str2blob()*
 
 		The argument {options} is a |Dict| and supports the following
 		items:
-		    encoding	Encode the characters using this encoding.
+		    encoding	Convert the characters using this encoding
+				before making the Blob.
 				The value is a |String|.  See |encoding-names|
 				for the supported values.
 
diff --git a/runtime/doc/eval.txt b/runtime/doc/eval.txt
index 0851aa5c3..0ada1b215 100644
--- a/runtime/doc/eval.txt
+++ b/runtime/doc/eval.txt
@@ -1,4 +1,4 @@
-*eval.txt*	For Vim version 9.1.  Last change: 2025 Jan 29
+*eval.txt*	For Vim version 9.1.  Last change: 2025 Feb 23
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -2081,7 +2081,7 @@ v:colornames    A dictionary that maps color names to hex color strings. These
 
 		You can make changes to that file, but make sure to add new
 		keys instead of updating existing ones, otherwise Vim will skip
-		loading the file (thinking is hasn't been changed).
+		loading the file (thinking it hasn't been changed).
 
 				*v:completed_item* *completed_item-variable*
 v:completed_item
diff --git a/runtime/doc/syntax.txt b/runtime/doc/syntax.txt
index cb6704cd3..d8c4b08ea 100644
--- a/runtime/doc/syntax.txt
+++ b/runtime/doc/syntax.txt
@@ -1,4 +1,4 @@
-*syntax.txt*	For Vim version 9.1.  Last change: 2025 Feb 20
+*syntax.txt*	For Vim version 9.1.  Last change: 2025 Feb 23
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -5432,6 +5432,10 @@ in their own color.
 			See |:highlight-default| for the optional [default]
 			argument.
 
+:hi[ghlight][!] [default] link {from-group} {to-group}
+:hi[ghlight][!] [default] link {from-group} NONE
+			See |:hi-link|.
+
 Normally a highlight group is added once when starting up.  This sets the
 default values for the highlighting.  After that, you can use additional
 highlight commands to change the arguments that you want to set to non-default
diff --git a/runtime/doc/terminal.txt b/runtime/doc/terminal.txt
index 53e2dcd08..1d502abc9 100644
--- a/runtime/doc/terminal.txt
+++ b/runtime/doc/terminal.txt
@@ -1,4 +1,4 @@
-*terminal.txt*	For Vim version 9.1.  Last change: 2025 Feb 13
+*terminal.txt*	For Vim version 9.1.  Last change: 2025 Feb 22
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -1092,11 +1092,11 @@ Currently supported commands:
 		Example in JSON: >
 			["drop", "path/file.txt", {"ff": "dos"}]
 
-A trick to have Vim send this escape sequence: >
-	exe "set t_ts=\<Esc>]51; t_fs=\x07"
-	let &titlestring = '["call","Tapi_TryThis",["hello",123]]'
-	redraw
-	set t_ts& t_fs&
+You can use |echoraw()| to make Vim send this escape sequence: >
+	call echoraw("\<ESC>]51;[\"call\", \"Tapi_TryThis\", [\"hello\", 123]]\x07")
+	call echoraw("\<Esc>]51;[\"drop\", \"README.md\"]\x07")
+Note: JSON requires double quotes around string values, hence those have to be
+escaped.
 
 Rationale: Why not allow for any command or expression?  Because that might
 create a security problem.
diff --git a/runtime/doc/todo.txt b/runtime/doc/todo.txt
index 5338b8b0a..9bdcfe0e3 100644
--- a/runtime/doc/todo.txt
+++ b/runtime/doc/todo.txt
@@ -1,4 +1,4 @@
-*todo.txt*      For Vim version 9.1.  Last change: 2025 Feb 02
+*todo.txt*      For Vim version 9.1.  Last change: 2025 Feb 21
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -4736,8 +4736,6 @@ Omni completion:
 Insert mode completion/expansion:
 -   Is it possible to keep the complete menu open when calling complete()?
     (Prabir Shrestha, 2017 May 19, #1713)
--   When 'completeopt' has "noselect" does not insert a newline.
-    (Lifepillar, 2017 Apr 23, #1653)
 -   When complete() first argument is before where insert started and
     'backspace' is Vi compatible, the completion fails.
     (Hirohito Higashi, 2015 Feb 19)
diff --git a/runtime/doc/version9.txt b/runtime/doc/version9.txt
index de38d08e2..99a4002c1 100644
--- a/runtime/doc/version9.txt
+++ b/runtime/doc/version9.txt
@@ -1,4 +1,4 @@
-*version9.txt*  For Vim version 9.1.  Last change: 2025 Feb 11
+*version9.txt*  For Vim version 9.1.  Last change: 2025 Feb 23
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -41573,8 +41573,11 @@ Include the "linematch" algorithm for the 'diffopt' setting.  This aligns
 changes between buffers on similar lines improving the diff highlighting in
 Vim
 
-Adjusted default values ~
------------------------
+							*changed-9.2*
+Changed~
+-------
+
+Default values: ~
 - the default 'history' option value has been increased to 200 and removed
   from |defaults.vim|
 - the default 'backspace' option for Vim has been set to "indent,eol,start"
@@ -41584,61 +41587,69 @@ Adjusted default values ~
 - the default value of the 'keyprotocol' option has been updated and support
   for the ghostty terminal emulator (using kitty protocol) has been added
 
-							*changed-9.2*
-Changed~
--------
-- use 'smoothscroll' logic for CTRL-F and CTRL-B for pagewise scrolling
-- use 'smoothscroll' logic for CTRL-D and CTRL-U for half-pagewise scrolling
+
+Completion: ~
+- allow to complete directories from 'cdpath' for |:cd| and similar commands,
+  add the "cd_in_path" completion type for e.g. |:command-complete| and
+  |getcompletion()|
+- allow to complete shell commands and files using the new shellcmdline
+  completion type using |:command-complete| and |getcmdcomplpat()|
+- allow to specify additional attributes in the completion menu (allows to
+  mark deprecated attributes from LSP server) |complete-items|
+- the completed word and completion type are provided when handling the
+  |CompleteDone| autocommand in the |v:event| dictionary
+- |complete_info()| returns the list of matches shown in the poppu menu via
+  the "matches" key
+- New option value for 'completeopt':
+	"nosort"	- do not sort completion results
+	"preinsert"	- highlight to be inserted values
+- handle multi-line completion as expected
+- improved commandline completion for the |:hi| command
+
+Options: ~
 - the default for 'commentstring' contains whitespace padding to have
   automatic comments look nicer |comment-install|
 - 'completeopt' is now a |global-local| option.
 - 'nrformats' accepts the new "blank" suboption, to determine a signed or
   unsigned number based on whitespace in front of a minus sign.
+- add 'cpoptions' flag "z" |cpo-z|, to disable some (traditional) vi
+  behaviour/inconsistency (see |d-special| and |cw|).
+- 'rulerformat' now supports the |stl-%!| item
+- use 'smoothscroll' logic for CTRL-F / CTRL-B for pagewise scrolling
+  and CTRL-D / CTRL-U for half-pagewise scrolling
+
+Ex commands: ~
 - allow to specify a priority when defining a new sign |:sign-define|
-- provide information about function arguments using the get(func, "arity")
-  function |get()-func|
 - |:bwipe| also wipes jumplist and tagstack data
 - moving in the buffer list using |:bnext| and similar commands, behaves as
   documented and skips help buffers (if not run from a help buffer, else
   moves to the next/previous help buffer).
-- allow to complete directories from 'cdpath' for |:cd| and similar commands,
-  add the "cd_in_path" completion type for e.g. |:command-complete| and
-  |getcompletion()|
-- allow to complete shell commands and files using the new shellcmdline
-  completion type using |:command-complete| and |getcmdcomplpat()|
-- add 'cpoptions' flag "z" |cpo-z|, to disable some (traditional) vi
-  behaviour/inconsistency (see |d-special| and |cw|).
-- allow to specify additional attributes in the completion menu (allows to
-  mark deprecated attributes from LSP server) |complete-items|
-- the regex engines match correctly case-insensitive multi-byte characters
-  (and apply proper case folding)
 - |:keeppatterns| preserves the last substitute pattern when used with |:s|
+
+Functions: ~
+- provide information about function arguments using the get(func, "arity")
+  function |get()-func|
 - |setqflist()| and |setloclist()| can optionally try to preserve the current
   selection in the quickfix list with the "u" action.
+- allow to pass local Vim script variables to python interpreter |py3eval()|
+- |getwininfo()| now also returns the "leftcol" property for a window
+- |v:stacktrace| The stack trace of the exception most recently caught and
+  not finished
+- Add the optional {opts} |Dict| argument to |getchar()| to control: cursor
+  behaviour, return type and whether or not to simplify the returned key
+
+Others: ~
+- the regex engines match correctly case-insensitive multi-byte characters
+  (and apply proper case folding)
 - the putty terminal is detected using an |TermResponse| autocommand in
   |defaults.vim| and Vim switches to a dark background
 - the |help-TOC| package is included to ease navigating the documentation.
 - an interactive tutor plugin has been included |vim-tutor-mode|, can be
   started via |:Tutor|
 - improve the |vimtutor| and add a second chapter for more advanced tips
-- allow to pass local Vim script variables to python interpreter |py3eval()|
-- |getwininfo()| now also returns the "leftcol" property for a window
-- 'rulerformat' now supports the |stl-%!| item
-- the completed word and completion type are provided when handling the
-  |CompleteDone| autocommand in the |v:event| dictionary
-- |complete_info()| returns the list of matches shown in the poppu menu via
-  the "matches" key
-- |v:stacktrace| The stack trace of the exception most recently caught and
-  not finished
-- New option value for 'completeopt':
-	"nosort"	- do not sort completion results
-	"preinsert"	- highlight to be inserted values
 - add |dist#vim9#Launch()| and |dist#vim9#Open()| to the |vim-script-library|
   and decouple it from |netrw|
 - new digraph "APPROACHES THE LIMIT" using ".="
-- Add the optional {opts} |Dict| argument to |getchar()| to control: cursor
-  behaviour, return type and whether or not to simplify the returned key
-- handle multi-line completion as expected
 
 							*added-9.2*
 Added ~
