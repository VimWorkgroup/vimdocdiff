diff --git a/runtime/doc/builtin.txt b/runtime/doc/builtin.txt
index e1847b1d3..0eb82b9e1 100644
--- a/runtime/doc/builtin.txt
+++ b/runtime/doc/builtin.txt
@@ -1,4 +1,4 @@
-*builtin.txt*	For Vim version 9.1.  Last change: 2025 Jul 17
+*builtin.txt*	For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -757,6 +757,7 @@ virtcol2col({winid}, {lnum}, {col})
 				Number  byte index of a character on screen
 visualmode([{expr}])		String	last visual mode used
 wildmenumode()			Number	whether 'wildmenu' mode is active
+wildtrigger()			Number	start wildcard expansion
 win_execute({id}, {command} [, {silent}])
 				String	execute {command} in window {id}
 win_findbuf({bufnr})		List	find windows containing {bufnr}
@@ -12331,6 +12332,33 @@ wildmenumode()					*wildmenumode()*
 		Return type: |Number|
 
 
+wildtrigger()						*wildtrigger()*
+		Start wildcard expansion in the command-line, using the
+		behavior defined by the 'wildmode' and 'wildoptions' settings.
+		See |cmdline-completion|.
+
+		This function also enables completion in search patterns such
+		as |/|, |?|, |:s|, |:g|, |:v| and |:vimgrep|.
+
+		Unlike pressing 'wildchar' manually, this function does not
+		produce a beep when no matches are found and generally
+		operates more quietly.  This makes it suitable for triggering
+		completion automatically, such as from an |:autocmd|.
+						*cmdline-autocompletion*
+		Example: To make the completion menu pop up automatically as
+		you type on the command line, use: >
+			autocmd CmdlineChanged [:/?] call wildtrigger()
+			set wildmode=noselect:lastused,full wildoptions=pum
+<
+		To retain normal history navigation (up/down keys): >
+			cnoremap <Up>   <C-U><Up>
+			cnoremap <Down> <C-U><Down>
+<
+		Return value is always 0.
+
+		Return type: |Number|
+
+
 win_execute({id}, {command} [, {silent}])		*win_execute()*
 		Like `execute()` but in the context of window {id}.
 		The window will temporarily be made the current window,
diff --git a/runtime/doc/cmdline.txt b/runtime/doc/cmdline.txt
index a15debe5e..edc0f0fc3 100644
--- a/runtime/doc/cmdline.txt
+++ b/runtime/doc/cmdline.txt
@@ -1,4 +1,4 @@
-*cmdline.txt*   For Vim version 9.1.  Last change: 2025 Jun 28
+*cmdline.txt*   For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -479,6 +479,8 @@ When repeating 'wildchar' or CTRL-N you cycle through the matches, eventually
 ending up back to what was typed.  If the first match is not what you wanted,
 you can use <S-Tab> or CTRL-P to go straight back to what you typed.
 
+See also |wildtrigger()|.
+
 The 'wildmenu' option can be set to show the matches just above the command
 line.
 
diff --git a/runtime/doc/develop.txt b/runtime/doc/develop.txt
index 726a59778..9b2e21b5d 100644
--- a/runtime/doc/develop.txt
+++ b/runtime/doc/develop.txt
@@ -1,4 +1,4 @@
-*develop.txt*   For Vim version 9.1.  Last change: 2025 Jul 18
+*develop.txt*   For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -10,9 +10,9 @@ This text is important for those who want to be involved in further developing
 Vim.
 
 1. Design goals		|design-goals|
-2. Coding style		|coding-style|
-3. Design decisions	|design-decisions|
-4. Assumptions		|design-assumptions|
+2. Design decisions	|design-decisions|
+3. Assumptions		|design-assumptions|
+4. Coding style		|coding-style|
 
 See the file README.txt in the "src" directory for an overview of the source
 code.
@@ -159,7 +159,204 @@ VIM IS... NOT						*design-not*
 
 
 ==============================================================================
-2. Coding style						*coding-style*
+2. Design decisions					*design-decisions*
+
+Folding
+
+Several forms of folding should be possible for the same buffer.  For example,
+have one window that shows the text with function bodies folded, another
+window that shows a function body.
+
+Folding is a way to display the text.  It should not change the text itself.
+Therefore the folding has been implemented as a filter between the text stored
+in a buffer (buffer lines) and the text displayed in a window (logical lines).
+
+
+Naming the window
+
+The word "window" is commonly used for several things: A window on the screen,
+the xterm window, a window inside Vim to view a buffer.
+To avoid confusion, other items that are sometimes called window have been
+given another name.  Here is an overview of the related items:
+
+screen		The whole display.  For the GUI it's something like 1024x768
+		pixels.  The Vim shell can use the whole screen or part of it.
+shell		The Vim application.  This can cover the whole screen (e.g.,
+		when running in a console) or part of it (xterm or GUI).
+window		View on a buffer.  There can be several windows in Vim,
+		together with the command line, menubar, toolbar, etc. they
+		fit in the shell.
+
+
+Spell checking						*develop-spell*
+
+When spell checking was going to be added to Vim a survey was done over the
+available spell checking libraries and programs.  Unfortunately, the result
+was that none of them provided sufficient capabilities to be used as the spell
+checking engine in Vim, for various reasons:
+
+- Missing support for multibyte encodings.  At least UTF-8 must be supported,
+  so that more than one language can be used in the same file.
+  Doing on-the-fly conversion is not always possible (would require iconv
+  support).
+- For the programs and libraries: Using them as-is would require installing
+  them separately from Vim.  That's mostly not impossible, but a drawback.
+- Performance: A few tests showed that it's possible to check spelling on the
+  fly (while redrawing), just like syntax highlighting.  But the mechanisms
+  used by other code are much slower.  Myspell uses a hashtable, for example.
+  The affix compression that most spell checkers use makes it slower too.
+- For using an external program like aspell a communication mechanism would
+  have to be setup.  That's complicated to do in a portable way (Unix-only
+  would be relatively simple, but that's not good enough).  And performance
+  will become a problem (lots of process switching involved).
+- Missing support for words with non-word characters, such as "Etten-Leur" and
+  "et al.", would require marking the pieces of them OK, lowering the
+  reliability.
+- Missing support for regions or dialects.  Makes it difficult to accept
+  all English words and highlight non-Canadian words differently.
+- Missing support for rare words.  Many words are correct but hardly ever used
+  and could be a misspelled often-used word.
+- For making suggestions the speed is less important and requiring to install
+  another program or library would be acceptable.  But the word lists probably
+  differ, the suggestions may be wrong words.
+
+
+Spelling suggestions				*develop-spell-suggestions*
+
+For making suggestions there are two basic mechanisms:
+1. Try changing the bad word a little bit and check for a match with a good
+   word.  Or go through the list of good words, change them a little bit and
+   check for a match with the bad word.  The changes are deleting a character,
+   inserting a character, swapping two characters, etc.
+2. Perform soundfolding on both the bad word and the good words and then find
+   matches, possibly with a few changes like with the first mechanism.
+
+The first is good for finding typing mistakes.  After experimenting with
+hashtables and looking at solutions from other spell checkers the conclusion
+was that a trie (a kind of tree structure) is ideal for this.  Both for
+reducing memory use and being able to try sensible changes.  For example, when
+inserting a character only characters that lead to good words need to be
+tried.  Other mechanisms (with hashtables) need to try all possible letters at
+every position in the word.  Also, a hashtable has the requirement that word
+boundaries are identified separately, while a trie does not require this.
+That makes the mechanism a lot simpler.
+
+Soundfolding is useful when someone knows how the words sounds but doesn't
+know how it is spelled.  For example, the word "dictionary" might be written
+as "daktonerie".  The number of changes that the first method would need to
+try is very big, it's hard to find the good word that way.  After soundfolding
+the words become "tktnr" and "tkxnry", these differ by only two letters.
+
+To find words by their soundfolded equivalent (soundalike word) we need a list
+of all soundfolded words.  A few experiments have been done to find out what
+the best method is.  Alternatives:
+1. Do the sound folding on the fly when looking for suggestions.  This means
+   walking through the trie of good words, soundfolding each word and
+   checking how different it is from the bad word.  This is very efficient for
+   memory use, but takes a long time.  On a fast PC it takes a couple of
+   seconds for English, which can be acceptable for interactive use.  But for
+   some languages it takes more than ten seconds (e.g., German, Catalan),
+   which is unacceptably slow.  For batch processing (automatic corrections)
+   it's too slow for all languages.
+2. Use a trie for the soundfolded words, so that searching can be done just
+   like how it works without soundfolding.  This requires remembering a list
+   of good words for each soundfolded word.  This makes finding matches very
+   fast but requires quite a lot of memory, in the order of 1 to 10 Mbyte.
+   For some languages more than the original word list.
+3. Like the second alternative, but reduce the amount of memory by using affix
+   compression and store only the soundfolded basic word.  This is what Aspell
+   does.  Disadvantage is that affixes need to be stripped from the bad word
+   before soundfolding it, which means that mistakes at the start and/or end
+   of the word will cause the mechanism to fail.  Also, this becomes slow when
+   the bad word is quite different from the good word.
+
+The choice made is to use the second mechanism and use a separate file.  This
+way a user with sufficient memory can get very good suggestions while a user
+who is short of memory or just wants the spell checking and no suggestions
+doesn't use so much memory.
+
+
+Word frequency
+
+For sorting suggestions it helps to know which words are common.  In theory we
+could store a word frequency with the word in the dictionary.  However, this
+requires storing a count per word.  That degrades word tree compression a lot.
+And maintaining the word frequency for all languages will be a heavy task.
+Also, it would be nice to prefer words that are already in the text.  This way
+the words that appear in the specific text are preferred for suggestions.
+
+What has been implemented is to count words that have been seen during
+displaying.  A hashtable is used to quickly find the word count.  The count is
+initialized from words listed in COMMON items in the affix file, so that it
+also works when starting a new file.
+
+This isn't ideal, because the longer Vim is running the higher the counts
+become.  But in practice it is a noticeable improvement over not using the word
+count.
+
+==============================================================================
+3. Assumptions						*design-assumptions*
+
+The following sections define the portability and compatibility constraints
+that all Vim code and build tools must adhere to.
+
+
+MAKEFILES					*assumptions-makefiles*
+						*POSIX.1-2001*
+
+Vim's main Makefiles target maximum portability, relying solely on features
+defined in POSIX.1-2001 `make` and ignoring later POSIX standards or GNU/BSD
+extensions.  In practical terms, avoid:
+
+	– % pattern rules
+	– modern assignment (`:=`, `::=`) outside POSIX.1-2001
+	– special targets (`.ONESHELL`, `.NOTPARALLEL`, `.SILENT`, …)
+	– order-only prerequisites (`|`) or automatic directory creation
+	– GNU/BSD conditionals (`ifdef`, `ifndef`, `.for`/`.endfor`, …)
+
+Since POSIX.1-2001 supports only traditional suffix rules, every object built
+in a separate directory must have an explicit rule.  For example:
+
+	objects/evalbuffer.o: evalbuffer.c
+		$(CCC) -o $@ evalbuffer.c
+
+This verbosity ensures that the same Makefile builds Vim unchanged with the
+default `make` on Linux, *BSD, macOS, Solaris, AIX, HP-UX and virtually any
+Unix-like OS.
+
+Some platform-specific Makefiles (e.g., for Windows, NSIS, or Cygwin) may use
+more advanced features when compatibility with basic make is not required.
+
+
+C COMPILER					*assumptions-C-compiler*
+						*ANSI-C* *C89* *C90* *C95* *C99*
+
+Vim strives for maximum portability (see |design-multi-platform|) and must
+still build with Compaq C V6.4-005 on OpenVMS VAX V7.3.
+
+Therefore, the latest ISO C standard we follow is:
+
+	`C95` (ISO/IEC 9899:1990/AMD1:1995)
+
+In addition, the following two `C99` features are explicitly allowed:
+	– `//` comments, as required by |style-comments|;
+	– the `_Bool` type.
+
+Platform-specific code may use any newer compiler features supported on that
+platform.
+
+
+SIZE OF VARIABLES				*assumptions-variables*
+
+	char        8-bit signed
+	char_u      8-bit unsigned
+	int         32- or 64-bit signed (16-bit possible on legacy systems)
+	unsigned    32- or 64-bit unsigned
+	long        at least 32-bit signed (large enough to hold a pointer)
+
+
+==============================================================================
+4. Coding style						*coding-style*
 
 These are the rules to use when making changes to the Vim source code.  Please
 stick to these rules, to keep the sources readable and maintainable.
@@ -198,23 +395,6 @@ Other source files do not yet correspond to the .clang-format file.  This may
 change in the future and they may be reformatted as well.
 
 
-C COMPILER				*style-compiler* *ANSI-C* *C89* *C99*
-
-The minimal C compiler version supported is C89, also known as ANSI C.
-Later standards, such as C99, are not widely supported, or at least not 100%
-supported.  Therefore we use only some of the C99 features and explicitly
-disallow some (this will gradually be adjusted over time).
-
-Features not to be used ~
-
-These C99 features are not to be used, because not enough compilers support
-them:
-- Variable length arrays (even in C11 this is an optional feature).
-- C99 _Bool and _Complex types.
-- "inline" (it's hardly ever needed, let the optimizer do its work)
-- flexible array members: Not supported by HP-UX C compiler (John Marriott)
-
-
 COMMENTS						*style-comments*
 
 Try to avoid putting multiline comments inside a function body: if the
@@ -513,153 +693,4 @@ OK:	    do
 	    while (cond);
 
 
-==============================================================================
-3. Design decisions					*design-decisions*
-
-Folding
-
-Several forms of folding should be possible for the same buffer.  For example,
-have one window that shows the text with function bodies folded, another
-window that shows a function body.
-
-Folding is a way to display the text.  It should not change the text itself.
-Therefore the folding has been implemented as a filter between the text stored
-in a buffer (buffer lines) and the text displayed in a window (logical lines).
-
-
-Naming the window
-
-The word "window" is commonly used for several things: A window on the screen,
-the xterm window, a window inside Vim to view a buffer.
-To avoid confusion, other items that are sometimes called window have been
-given another name.  Here is an overview of the related items:
-
-screen		The whole display.  For the GUI it's something like 1024x768
-		pixels.  The Vim shell can use the whole screen or part of it.
-shell		The Vim application.  This can cover the whole screen (e.g.,
-		when running in a console) or part of it (xterm or GUI).
-window		View on a buffer.  There can be several windows in Vim,
-		together with the command line, menubar, toolbar, etc. they
-		fit in the shell.
-
-
-Spell checking						*develop-spell*
-
-When spell checking was going to be added to Vim a survey was done over the
-available spell checking libraries and programs.  Unfortunately, the result
-was that none of them provided sufficient capabilities to be used as the spell
-checking engine in Vim, for various reasons:
-
-- Missing support for multibyte encodings.  At least UTF-8 must be supported,
-  so that more than one language can be used in the same file.
-  Doing on-the-fly conversion is not always possible (would require iconv
-  support).
-- For the programs and libraries: Using them as-is would require installing
-  them separately from Vim.  That's mostly not impossible, but a drawback.
-- Performance: A few tests showed that it's possible to check spelling on the
-  fly (while redrawing), just like syntax highlighting.  But the mechanisms
-  used by other code are much slower.  Myspell uses a hashtable, for example.
-  The affix compression that most spell checkers use makes it slower too.
-- For using an external program like aspell a communication mechanism would
-  have to be setup.  That's complicated to do in a portable way (Unix-only
-  would be relatively simple, but that's not good enough).  And performance
-  will become a problem (lots of process switching involved).
-- Missing support for words with non-word characters, such as "Etten-Leur" and
-  "et al.", would require marking the pieces of them OK, lowering the
-  reliability.
-- Missing support for regions or dialects.  Makes it difficult to accept
-  all English words and highlight non-Canadian words differently.
-- Missing support for rare words.  Many words are correct but hardly ever used
-  and could be a misspelled often-used word.
-- For making suggestions the speed is less important and requiring to install
-  another program or library would be acceptable.  But the word lists probably
-  differ, the suggestions may be wrong words.
-
-
-Spelling suggestions				*develop-spell-suggestions*
-
-For making suggestions there are two basic mechanisms:
-1. Try changing the bad word a little bit and check for a match with a good
-   word.  Or go through the list of good words, change them a little bit and
-   check for a match with the bad word.  The changes are deleting a character,
-   inserting a character, swapping two characters, etc.
-2. Perform soundfolding on both the bad word and the good words and then find
-   matches, possibly with a few changes like with the first mechanism.
-
-The first is good for finding typing mistakes.  After experimenting with
-hashtables and looking at solutions from other spell checkers the conclusion
-was that a trie (a kind of tree structure) is ideal for this.  Both for
-reducing memory use and being able to try sensible changes.  For example, when
-inserting a character only characters that lead to good words need to be
-tried.  Other mechanisms (with hashtables) need to try all possible letters at
-every position in the word.  Also, a hashtable has the requirement that word
-boundaries are identified separately, while a trie does not require this.
-That makes the mechanism a lot simpler.
-
-Soundfolding is useful when someone knows how the words sounds but doesn't
-know how it is spelled.  For example, the word "dictionary" might be written
-as "daktonerie".  The number of changes that the first method would need to
-try is very big, it's hard to find the good word that way.  After soundfolding
-the words become "tktnr" and "tkxnry", these differ by only two letters.
-
-To find words by their soundfolded equivalent (soundalike word) we need a list
-of all soundfolded words.  A few experiments have been done to find out what
-the best method is.  Alternatives:
-1. Do the sound folding on the fly when looking for suggestions.  This means
-   walking through the trie of good words, soundfolding each word and
-   checking how different it is from the bad word.  This is very efficient for
-   memory use, but takes a long time.  On a fast PC it takes a couple of
-   seconds for English, which can be acceptable for interactive use.  But for
-   some languages it takes more than ten seconds (e.g., German, Catalan),
-   which is unacceptably slow.  For batch processing (automatic corrections)
-   it's too slow for all languages.
-2. Use a trie for the soundfolded words, so that searching can be done just
-   like how it works without soundfolding.  This requires remembering a list
-   of good words for each soundfolded word.  This makes finding matches very
-   fast but requires quite a lot of memory, in the order of 1 to 10 Mbyte.
-   For some languages more than the original word list.
-3. Like the second alternative, but reduce the amount of memory by using affix
-   compression and store only the soundfolded basic word.  This is what Aspell
-   does.  Disadvantage is that affixes need to be stripped from the bad word
-   before soundfolding it, which means that mistakes at the start and/or end
-   of the word will cause the mechanism to fail.  Also, this becomes slow when
-   the bad word is quite different from the good word.
-
-The choice made is to use the second mechanism and use a separate file.  This
-way a user with sufficient memory can get very good suggestions while a user
-who is short of memory or just wants the spell checking and no suggestions
-doesn't use so much memory.
-
-
-Word frequency
-
-For sorting suggestions it helps to know which words are common.  In theory we
-could store a word frequency with the word in the dictionary.  However, this
-requires storing a count per word.  That degrades word tree compression a lot.
-And maintaining the word frequency for all languages will be a heavy task.
-Also, it would be nice to prefer words that are already in the text.  This way
-the words that appear in the specific text are preferred for suggestions.
-
-What has been implemented is to count words that have been seen during
-displaying.  A hashtable is used to quickly find the word count.  The count is
-initialized from words listed in COMMON items in the affix file, so that it
-also works when starting a new file.
-
-This isn't ideal, because the longer Vim is running the higher the counts
-become.  But in practice it is a noticeable improvement over not using the word
-count.
-
-==============================================================================
-4. Assumptions						*design-assumptions*
-
-Size of variables:
-char	    8 bit signed
-char_u	    8 bit unsigned
-int	    32 or 64 bit signed (16 might be possible with limited features)
-unsigned    32 or 64 bit unsigned (16 as with ints)
-long	    32 or 64 bit signed, can hold a pointer
-
-Note that some compilers cannot handle long lines or strings.  The C89
-standard specifies a limit of 509 characters.
-
  vim:tw=78:ts=8:noet:ft=help:norl:
diff --git a/runtime/doc/editing.txt b/runtime/doc/editing.txt
index 270cc9e24..af9f39e23 100644
--- a/runtime/doc/editing.txt
+++ b/runtime/doc/editing.txt
@@ -1,4 +1,4 @@
-*editing.txt*   For Vim version 9.1.  Last change: 2025 Jun 25
+*editing.txt*   For Vim version 9.1.  Last change: 2025 Jul 20
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -656,7 +656,7 @@ list of the current window.
 			buffer.
 			Also see |++opt| and |+cmd|.
 
-:[count]arge[dit][!] [++opt] [+cmd] {name} ..		*:arge* *:argedit*
+:[count]arge[dit][!] [++opt] [+cmd] {name} ...		*:arge* *:argedit*
 			Add {name}s to the argument list and edit it.
 			There is no check for duplicates, it is possible to
 			add a file to the argument list twice |:argded|.
@@ -671,7 +671,7 @@ list of the current window.
 			edited. No check for duplicates is done.
 			Also see |++opt| and |+cmd|.
 
-:[count]arga[dd] {name} ..			*:arga* *:argadd* *E479*
+:[count]arga[dd] {name} ...			*:arga* *:argadd* *E479*
 :[count]arga[dd]						*E1156*
 			Add the {name}s to the argument list.  When {name} is
 			omitted add the current buffer name to the argument
@@ -702,7 +702,7 @@ list of the current window.
 			If your current file is a duplicate, your current file
 			will change to the original file index.
 
-:argd[elete] {pattern} ..		*:argd* *:argdelete* *E480* *E610*
+:argd[elete] {pattern} ...		*:argd* *:argdelete* *E480* *E610*
 			Delete files from the argument list that match the
 			{pattern}s.  {pattern} is used like a file pattern,
 			see |file-pattern|.  "%" can be used to delete the
diff --git a/runtime/doc/eval.txt b/runtime/doc/eval.txt
index 73cb70b96..f0c380d6e 100644
--- a/runtime/doc/eval.txt
+++ b/runtime/doc/eval.txt
@@ -1,4 +1,4 @@
-*eval.txt*	For Vim version 9.1.  Last change: 2025 Jul 13
+*eval.txt*	For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -3312,7 +3312,7 @@ text...
 				CODE
 <
 								*E121*
-:let {var-name}	..	List the value of variable {var-name}.  Multiple
+:let {var-name}	...	List the value of variable {var-name}.  Multiple
 			variable names may be given.  Special names recognized
 			here:				*E738*
 			  g:	global variables
@@ -3722,7 +3722,7 @@ text...
 			improve script readability.
 
 							*:ec* *:echo*
-:ec[ho] {expr1} ..	Echoes each {expr1}, with a space in between.  The
+:ec[ho] {expr1} ...	Echoes each {expr1}, with a space in between.  The
 			first {expr1} starts on a new line.
 			Also see |:comment|.
 			Use "\n" to start a new line.  Use "\r" to move the
@@ -3742,7 +3742,7 @@ text...
 		:new | redraw | echo "there is a new window"
 <
 							*:echon*
-:echon {expr1} ..	Echoes each {expr1}, without anything added.  Also see
+:echon {expr1} ...	Echoes each {expr1}, without anything added.  Also see
 			|:comment|.
 			Uses the highlighting set by the `:echohl` command.
 			Cannot be followed by a comment.
@@ -3773,7 +3773,7 @@ text...
 			otherwise all following echo's will be highlighted.
 
 							*:echom* *:echomsg*
-:echom[sg] {expr1} ..	Echo the expression(s) as a true message, saving the
+:echom[sg] {expr1} ...	Echo the expression(s) as a true message, saving the
 			message in the |message-history|.
 			Spaces are placed between the arguments as with the
 			`:echo` command.  But unprintable characters are
@@ -3805,7 +3805,7 @@ text...
 			with the +timer and the +popupwin features.
 
 							*:echoe* *:echoerr*
-:echoe[rr] {expr1} ..	Echo the expression(s) as an error message, saving the
+:echoe[rr] {expr1} ...	Echo the expression(s) as an error message, saving the
 			message in the |message-history|.  When used in a
 			script or function the line number will be added.
 			Spaces are placed between the arguments as with the
@@ -3818,7 +3818,7 @@ text...
 			And to get a beep: >
 		:exe "normal \<Esc>"
 
-:echoc[onsole] {expr1} ..				*:echoc* *:echoconsole*
+:echoc[onsole] {expr1} ...				*:echoc* *:echoconsole*
 			Intended for testing: works like `:echomsg` but when
 			running in the GUI and started from a terminal write
 			the text to stdout.
@@ -3845,7 +3845,7 @@ text...
 
 
 							*:exe* *:execute*
-:exe[cute] {expr1} ..	Executes the string that results from the evaluation
+:exe[cute] {expr1} ...	Executes the string that results from the evaluation
 			of {expr1} as an Ex command.
 			Multiple arguments are concatenated, with a space in
 			between.  To avoid the extra space use the ".."
diff --git a/runtime/doc/ft_rust.txt b/runtime/doc/ft_rust.txt
index 564f3e774..30b23ced1 100644
--- a/runtime/doc/ft_rust.txt
+++ b/runtime/doc/ft_rust.txt
@@ -159,7 +159,20 @@ g:rustfmt_emit_files~
 	determines whether to run rustfmt with '--emit=files' (when 1 is
 	provided) instead of '--write-mode=overwrite'. >
 	    let g:rustfmt_emit_files = 0
-
+<
+                                                       *g:rustfmt_detect_version*
+g:rustfmt_detect_version~
+	When set to 1, will try to parse the version output from "rustfmt".
+	Disabled by default for performance reasons
+>
+	    let g:rustfmt_detect_version = 1
+<
+                                                       *g:rustfmt_find_toml*
+g:rustfmt_emit_files~
+	When set to 1, will try to find "rustfmt.toml" file by searching from
+	current path upwards.  Disabled by default for performance reasons
+>
+	    let g:rustfmt_find_toml = 1
 <
                                                           *g:rust_playpen_url*
 g:rust_playpen_url~
diff --git a/runtime/doc/index.txt b/runtime/doc/index.txt
index 8ff3ae5fe..aa4741567 100644
--- a/runtime/doc/index.txt
+++ b/runtime/doc/index.txt
@@ -1,4 +1,4 @@
-*index.txt*     For Vim version 9.1.  Last change: 2025 Jul 17
+*index.txt*     For Vim version 9.1.  Last change: 2025 Jul 20
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -530,7 +530,7 @@ tag		command		   action in op-pending and Visual mode	~
 tag		command		   action in Normal mode	~
 ------------------------------------------------------------------------------
 |CTRL-W_CTRL-B|	CTRL-W CTRL-B	   same as "CTRL-W b"
-|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   no-op |CTRL-W_CTRL-C|
+|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   no-op
 |CTRL-W_CTRL-D|	CTRL-W CTRL-D	   same as "CTRL-W d"
 |CTRL-W_CTRL-F|	CTRL-W CTRL-F	   same as "CTRL-W f"
 		CTRL-W CTRL-G	   same as "CTRL-W g .."
diff --git a/runtime/doc/insert.txt b/runtime/doc/insert.txt
index 80b604155..4352388f5 100644
--- a/runtime/doc/insert.txt
+++ b/runtime/doc/insert.txt
@@ -1,4 +1,4 @@
-*insert.txt*    For Vim version 9.1.  Last change: 2025 Jul 17
+*insert.txt*    For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -1475,7 +1475,7 @@ Universal Ctags is preferred, Exuberant Ctags is no longer being developed.
 
 For Exuberant ctags, version 5.6 or later is recommended.  For version 5.5.4
 you should add a patch that adds the "typename:" field:
-	ftp://ftp.vim.org/pub/vim/unstable/patches/ctags-5.5.4.patch
+	https://ftp.nluug.nl/pub/vim/unstable/patches/ctags-5.5.4.patch
 A compiled .exe for MS-Windows can be found at:
 	http://ctags.sourceforge.net/
 	https://github.com/universal-ctags/ctags-win32
diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index a624a9ac6..0a1d955fb 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -1,4 +1,4 @@
-*options.txt*	For Vim version 9.1.  Last change: 2025 Jul 16
+*options.txt*	For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -3007,7 +3007,6 @@ A jump table for the options with a short description can be found at |Q_op|.
 	a pattern search that does not match anything), none of the anchors
 	will be used.
 
-
 						*'dex'* *'diffexpr'*
 'diffexpr' 'dex'	string	(default "")
 			global
@@ -7504,6 +7503,9 @@ A jump table for the options with a short description can be found at |Q_op|.
 	Don't forget to precede the space with a backslash: ":set sp=\ ".
 	In the future pipes may be used for filtering and this option will
 	become obsolete (at least for Unix).
+	Note: When using a pipe like "| tee", you'll lose the exit code of the
+	shell command.  This might be configurable by your shell, look for
+	the pipefail option (for bash and zsh, use ":set -o pipefail").
 	This option cannot be set from a |modeline| or in the |sandbox|, for
 	security reasons.
 
@@ -9795,7 +9797,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 <	'wildchar' also enables completion in search pattern contexts such as
 	|/|, |?|, |:s|, |:g|, |:v|, and |:vim|.  To insert a literal <Tab>
 	instead of triggering completion, type <C-V><Tab> or "\t".
-	See also |'wildoptions'|.
+	See also 'wildoptions' and |wildtrigger()|.
 	NOTE: This option is set to the Vi default value when 'compatible' is
 	set and to the Vim default value when 'compatible' is reset.
 
diff --git a/runtime/doc/os_amiga.txt b/runtime/doc/os_amiga.txt
index 32d460281..cea3a3e05 100644
--- a/runtime/doc/os_amiga.txt
+++ b/runtime/doc/os_amiga.txt
@@ -1,4 +1,4 @@
-*os_amiga.txt*  For Vim version 9.1.  Last change: 2010 Aug 14
+*os_amiga.txt*  For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -111,12 +111,12 @@ would be better to enter:
 	vim --noplugins <of course you can add a file>
 
 
-Installation ~
+Installation of a binary archive ~
 
 1) Please copy the binary 'VIM' file to c:
-2) Get the Vim runtime package from:
+2) Get the Vim runtime package from (Note: that server is no longer updated):
 
-	ftp://ftp.vim.org/pub/vim/amiga/vim62rt.tgz
+	https://ftp.nluug.nl/pub/vim/amiga/vim90src.tgz
 
    and unpack it in your 'Apps' directory of the MorphOS installation.  For me
    this would create following directory hierarchy:
@@ -143,5 +143,13 @@ Installation ~
 	Cls
 	;End VIM
 
+Compiling~
+
+You can download the Vim source code from the official Vim site:
+	https://github.com/vim/vim/archive/refs/heads/master.zip
+Or using git: >
+	git clone https://github.com/vim/vim.git
+
+For compiling see "src/INSTALLami.txt"
 
  vim:tw=78:ts=8:noet:ft=help:norl:
diff --git a/runtime/doc/os_vms.txt b/runtime/doc/os_vms.txt
index 4549c0018..8951d9e51 100644
--- a/runtime/doc/os_vms.txt
+++ b/runtime/doc/os_vms.txt
@@ -1,4 +1,4 @@
-*os_vms.txt*    For Vim version 9.1.  Last change: 2024 May 11
+*os_vms.txt*    For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL
@@ -33,10 +33,18 @@ Vim on other operating systems.
 
 2. Download files					*vms-download*
 
-You can download the Vim source code by ftp from the official Vim site:
-	ftp://ftp.vim.org/pub/vim/
+You can download the Vim source code from the official Vim site:
+	https://github.com/vim/vim/archive/refs/heads/master.zip
+Or using git: >
+	git clone https://github.com/vim/vim.git
+
+Older release archives are also available at:
+	https://ftp.nluug.nl/pub/vim/
+	ftp://ftp.nluug.nl/pub/vim/
 Or use one of the mirrors:
-	ftp://ftp.vim.org/pub/vim/MIRRORS
+	https://ftp.nluug.nl/pub/vim/MIRRORS
+
+Note: the ftp server has been retired and is no longer updated.
 
 You can download precompiled executables from:
 	http://www.polarhome.com/vim/
diff --git a/runtime/doc/syntax.txt b/runtime/doc/syntax.txt
index b1f644e5b..b90c01b1d 100644
--- a/runtime/doc/syntax.txt
+++ b/runtime/doc/syntax.txt
@@ -1,4 +1,4 @@
-*syntax.txt*	For Vim version 9.1.  Last change: 2025 Jul 14
+*syntax.txt*	For Vim version 9.1.  Last change: 2025 Jul 20
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -262,6 +262,9 @@ you can see the actual color, except for "Ignore"):
 	 Debug		debugging statements
 
 	*Underlined	text that stands out, HTML links
+	*Bold		bold text
+	*Italic		italic text
+	*BoldItalic	bold and italic text
 
 	*Ignore		left blank, hidden  |hl-Ignore|
 
@@ -4350,13 +4353,13 @@ SYNTAX ISKEYWORD SETTING				*:syn-iskeyword*
 
 DEFINING KEYWORDS					*:syn-keyword*
 
-:sy[ntax] keyword {group-name} [{options}] {keyword} .. [{options}]
+:sy[ntax] keyword {group-name} [{options}] {keyword} ... [{options}]
 
 	This defines a number of keywords.
 
 	{group-name}	Is a syntax group name such as "Comment".
 	[{options}]	See |:syn-arguments| below.
-	{keyword} ..	Is a list of keywords which are part of this group.
+	{keyword} ...	Is a list of keywords which are part of this group.
 
 	Example: >
   :syntax keyword   Type   int long char
diff --git a/runtime/doc/tabpage.txt b/runtime/doc/tabpage.txt
index 4f46ddd0a..b1efbd162 100644
--- a/runtime/doc/tabpage.txt
+++ b/runtime/doc/tabpage.txt
@@ -1,4 +1,4 @@
-*tabpage.txt*   For Vim version 9.1.  Last change: 2025 Jul 17
+*tabpage.txt*   For Vim version 9.1.  Last change: 2025 Jul 20
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -38,9 +38,9 @@ commands, |:windo|, |:all| and |:ball| (when not using the |:tab| modifier).
 The commands that are aware of other tab pages than the current one are
 mentioned below.
 
-Tabs are also a nice way to edit a buffer temporarily without changing the
-current window layout.  Open a new tab page, do whatever you want to do and
-close the tab page.
+Tab pages are also a nice way to edit a buffer temporarily without changing
+the current window layout.  Open a new tab page, do whatever you want to do
+and close the tab page.
 
 ==============================================================================
 2. Commands						*tab-page-commands*
@@ -145,7 +145,7 @@ something else.
 		    :tabclose $	    " close the last tab page
 		    :tabclose #     " close the last accessed tab page
 
-When a tab is closed the next tab page will become the current one. This
+When a tab page is closed the next tab page will become the current one. This
 behaviour can be customized using the 'tabclose' option.
 
 							*:tabo* *:tabonly*
@@ -252,7 +252,7 @@ REORDERING TAB PAGES:
 :[N]tabm[ove]
 		Move the current tab page to after tab page N.  Use zero to
 		make the current tab page the first one.  N is counted before
-		the move, thus if the second tab is the current one,
+		the move, thus if the second tab page is the current one,
 		`:tabmove 1` and `:tabmove 2` have no effect.
 		Without N the tab page is made the last one. >
 		    :.tabmove	" do nothing
@@ -276,9 +276,9 @@ REORDERING TAB PAGES:
 		    :tabmove +1	" as above
 
 
-Note that although it is possible to move a tab behind the N-th one by using
-:Ntabmove. And move it by N places by using :+Ntabmove. For clarification what
-+N means in this context see |[range]|.
+Note that although it is possible to move a tab page behind the N-th one by
+using :Ntabmove. And move it by N places by using :+Ntabmove. For
+clarification what +N means in this context see |[range]|.
 
 
 LOOPING OVER TAB PAGES:
@@ -363,8 +363,8 @@ A "+" will be shown for a tab page that has a modified window.  The number of
 windows in a tabpage is also shown.  Thus "3+" means three windows and one of
 them has a modified buffer.
 
-An "X" (close button) will appear in the last column when multiple tabs are
-open, but only if the 'mouse' is enabled.
+An "X" (close button) will appear in the last column when multiple tab pages
+are open, but only if the 'mouse' is enabled.
 
 The 'tabline' option allows you to define your preferred way to tab pages
 labels.  This isn't easy, thus an example will be given here.
@@ -398,7 +398,7 @@ pages and define labels for them.  Then get the label for each tab page. >
 	    let s ..= ' %{MyTabLabel(' .. (i + 1) .. ')} '
 	  endfor
 
-	  " after the last tab fill with TabLineFill and reset tab page nr
+	  " after the last tab page fill with TabLineFill and reset tab page nr
 	  let s ..= '%#TabLineFill#%T'
 
 	  " right-align the label to close the current tab page
diff --git a/runtime/doc/todo.txt b/runtime/doc/todo.txt
index 0a4c92fcb..ff6b6a59e 100644
--- a/runtime/doc/todo.txt
+++ b/runtime/doc/todo.txt
@@ -1,4 +1,4 @@
-*todo.txt*      For Vim version 9.1.  Last change: 2025 Jun 12
+*todo.txt*      For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -115,7 +115,6 @@ Further Vim9 improvements:
   - For chaining, allow using the class name as type for function return
     value.
   - Implement "specifies" interface
-  - Implement generics
   - Add "assignable" (class or child)?
   - More efficient way for interface member index than iterating over list?
   - a variant of type() that returns a different type for each class?
diff --git a/runtime/doc/usr_02.txt b/runtime/doc/usr_02.txt
index af1cd619b..76b0ae230 100644
--- a/runtime/doc/usr_02.txt
+++ b/runtime/doc/usr_02.txt
@@ -1,4 +1,4 @@
-*usr_02.txt*	For Vim version 9.1.  Last change: 2025 Jun 03
+*usr_02.txt*	For Vim version 9.1.  Last change: 2025 Jul 22
 
 		     VIM USER MANUAL - by Bram Moolenaar
 
@@ -614,7 +614,7 @@ Summary:					*help-summary*  >
 <    for how the '|' is handled in mappings.
 
 15) Command definitions are talked about :h command-topic, so use >
-	:help command-bar
+	:help command-bang
 <    to find out about the '!' argument for custom commands.
 
 16) Window management commands always start with CTRL-W, so you find the
diff --git a/runtime/doc/usr_23.txt b/runtime/doc/usr_23.txt
index 016f74295..335c073f1 100644
--- a/runtime/doc/usr_23.txt
+++ b/runtime/doc/usr_23.txt
@@ -1,4 +1,4 @@
-*usr_23.txt*	For Vim version 9.1.  Last change: 2020 Dec 19
+*usr_23.txt*	For Vim version 9.1.  Last change: 2025 Jul 22
 
 		     VIM USER MANUAL - by Bram Moolenaar
 
@@ -118,7 +118,7 @@ Someone sends you an e-mail message, which refers to a file by its URL.  For
 example:
 
 	You can find the information here: ~
-		ftp://ftp.vim.org/pub/vim/README ~
+		https://ftp.nluug.nl/pub/vim/README
 
 You could start a program to download the file, save it on your local disk and
 then start Vim to edit it.
diff --git a/runtime/doc/usr_41.txt b/runtime/doc/usr_41.txt
index 02d58f0d8..d263bed9e 100644
--- a/runtime/doc/usr_41.txt
+++ b/runtime/doc/usr_41.txt
@@ -1,4 +1,4 @@
-*usr_41.txt*	For Vim version 9.1.  Last change: 2025 Jul 05
+*usr_41.txt*	For Vim version 9.1.  Last change: 2025 Jul 21
 
 		     VIM USER MANUAL - by Bram Moolenaar
 
@@ -1233,6 +1233,7 @@ Mappings and Menus:			    *mapping-functions*
 	mapset()		restore a mapping
 	menu_info()		get information about a menu item
 	wildmenumode()		check if the wildmode is active
+	wildtrigger()		start wildcard expansion
 
 Testing:				    *test-functions*
 	assert_equal()		assert that two expressions values are equal
diff --git a/runtime/doc/usr_90.txt b/runtime/doc/usr_90.txt
index d144303ee..babf48214 100644
--- a/runtime/doc/usr_90.txt
+++ b/runtime/doc/usr_90.txt
@@ -1,4 +1,4 @@
-*usr_90.txt*	For Vim version 9.1.  Last change: 2025 Mar 03
+*usr_90.txt*	For Vim version 9.1.  Last change: 2025 Jul 23
 
 		     VIM USER MANUAL - by Bram Moolenaar
 
@@ -189,69 +189,49 @@ source code yourself!
 ==============================================================================
 *90.2*	MS-Windows
 
-There are two ways to install the Vim program for Microsoft Windows.  You can
-uncompress several archives, or use a self-installing big archive.  Most users
-with fairly recent computers will prefer the second method.  For the first
-one, you will need:
+There are several ways to install the Vim program for Microsoft Windows:
 
-	- An archive with binaries for Vim.
-	- The Vim runtime archive.
-	- A program to unpack the zip files.
+    1. Official Website Download (Stable)~
 
-To get the Vim archives, look in this file for a mirror near you, this should
-provide the fastest download:
+Visit the official Vim website at https://www.vim.org to download the latest
+stable version. The site links to the Windows installer that works out of the
+box for most users.
 
-	ftp://ftp.vim.org/pub/vim/MIRRORS
+    2. Using winget (Windows Package Manager) ~
 
-Or use the home site ftp.vim.org, if you think it's fast enough.  Go to the
-"pc" directory and you'll find a list of files there.  The version number is
-embedded in the file name.  You will want to get the most recent version.
-We will use "82" here, which is version 8.2.
+If you prefer using the command line, you can quickly install Vim using
+Windows built-in package manager for the stable version: >
 
-	gvim82.exe		The self-installing archive.
+	winget install vim.vim
 
-This is all you need for the second method.  Just launch the executable, and
-follow the prompts.
+Or to download the latest nightly version, use: >
 
-For the first method you must choose one of the binary archives.  These are
-available:
+	winget install vim.vim.nightly
 
-	gvim82.zip		The normal MS-Windows GUI version.
-	gvim82ole.zip		The MS-Windows GUI version with OLE support.
-				Uses more memory, supports interfacing with
-				other OLE applications.
-	vim82w32.zip		32 bit MS-Windows console version.
+This method ensures you get an up-to-date version with minimal hassle.
 
-You only need one of them.  Although you could install both a GUI and a
-console version.  You always need to get the archive with runtime files.
+    3. GitHub Installer (All Architectures) ~
 
-	vim82rt.zip		The runtime files.
+For more control over the installation (or if you're using a specific CPU
+architecture like ARM), visit the official GitHub repository:
 
-Use your un-zip program to unpack the files.  For example, using the "unzip"
-program: >
+	https://github.com/vim/vim-win32-installer/
 
-	cd c:\
-	unzip path\gvim82.zip
-	unzip path\vim82rt.zip
+This repo provides daily installer and portable zip archives for:
 
-This will unpack the files in the directory "c:\vim\vim82".  If you already
-have a "vim" directory somewhere, you will want to move to the directory just
-above it.
-   Now change to the "vim\vim82" directory and run the install program: >
+    - x86 (32-bit)
+    - x64 (64-bit)
+    - ARM64
 
-	install
-
-Carefully look through the messages and select the options you want to use.
-If you finally select "do it" the install program will carry out the actions
-you selected.
-   The install program doesn't move the runtime files.  They remain where you
-unpacked them.
+It's a great option if you want nightly builds or specific configuration
 
 In case you are not satisfied with the features included in the supplied
 binaries, you could try compiling Vim yourself.  Get the source archive from
 the same location as where the binaries are.  You need a compiler for which a
 makefile exists.  Microsoft Visual C, MinGW and Cygwin compilers can be used.
-Check the file src/INSTALLpc.txt for hints.
+Check the file src/INSTALLpc.txt for hints.  You can get the source from:
+
+	https://github.com/vim/vim
 
 ==============================================================================
 *90.3*	Upgrading
diff --git a/runtime/doc/version6.txt b/runtime/doc/version6.txt
index f4d2a9858..5f6f0c0e8 100644
--- a/runtime/doc/version6.txt
+++ b/runtime/doc/version6.txt
@@ -1,4 +1,4 @@
-*version6.txt*  For Vim version 9.1.  Last change: 2022 Apr 06
+*version6.txt*  For Vim version 9.1.  Last change: 2025 Jul 22
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -12624,7 +12624,7 @@ Solution:   Use ":compiler!" to set a compiler globally, otherwise it's local
 	    to the buffer and "b:current_compiler" is used.  Give an error
 	    when no compiler script could be found.
 	    Note: updated compiler plugins can be found at
-	    ftp://ftp.vim.org/pub/vim/runtime/compiler/
+	    https://github.com/vim/vim/tree/master/runtime/compiler
 Files:	    runtime/compiler/msvc.vim, runtime/doc/quickfix.txt, src/eval.c,
 	    src/ex_cmds2.c
 
diff --git a/runtime/doc/version8.txt b/runtime/doc/version8.txt
index 1d36c78b1..cfb6f1e3d 100644
--- a/runtime/doc/version8.txt
+++ b/runtime/doc/version8.txt
@@ -1,4 +1,4 @@
-*version8.txt*  For Vim version 9.1.  Last change: 2022 Feb 26
+*version8.txt*  For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -14558,7 +14558,7 @@ Changed							*changed-8.1*
 -------
 
 Internal: A few C99 features are now allowed such as // comments and a
-comma after the last enum entry.  See |style-compiler|.
+comma after the last enum entry.  See |assumptions-C-compiler|.
 
 Since patch 8.0.0029 removed support for older MS-Windows systems, only
 MS-Windows XP and later are supported.
diff --git a/runtime/doc/version9.txt b/runtime/doc/version9.txt
index 1dd1576ac..10b47424f 100644
--- a/runtime/doc/version9.txt
+++ b/runtime/doc/version9.txt
@@ -1,4 +1,4 @@
-*version9.txt*  For Vim version 9.1.  Last change: 2025 Jul 16
+*version9.txt*  For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -41551,6 +41551,8 @@ Add support for internal builtin functions with vim9 objects, see
 
 Enum support for Vim9 script |:enum|
 
+Generic function support for Vim9 script |generic-functions|
+
 Support for protected _new() method
 
 Support for compiling all the methods in a Vim9 class using |:defcompile|.
@@ -41601,6 +41603,7 @@ Completion~
 	"nosort"	- do not sort completion results
 	"preinsert"	- highlight to be inserted values
 	"nearest"	- sort completion results by distance to cursor
+- new function |wildtrigger()| to trigger wildcard expansion
 
 Platform specific~
 -----------------
@@ -41640,6 +41643,9 @@ Other new features ~
 
 - The new digraph "APPROACHES THE LIMIT" using ".=" has been added.
 
+- Add the new default highlighting groups "Bold", "Italic" and "BoldItalic"
+  for use in syntax scripts.
+
 							*changed-9.2*
 Changed~
 -------
@@ -41762,6 +41768,7 @@ Functions: ~
 |str2blob()|		convert a List of strings into a blob
 |test_null_tuple()|	return a null tuple
 |tuple2list()|		turn a Tuple of items into a List
+|wildtrigger()|		trigger wildcard expansion
 
 
 Autocommands: ~
diff --git a/runtime/doc/vim9.txt b/runtime/doc/vim9.txt
index 0dae57deb..063c17936 100644
--- a/runtime/doc/vim9.txt
+++ b/runtime/doc/vim9.txt
@@ -1,4 +1,4 @@
-*vim9.txt*	For Vim version 9.1.  Last change: 2025 Apr 27
+*vim9.txt*	For Vim version 9.1.  Last change: 2025 Jul 21
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -15,10 +15,11 @@ features in Vim9 script.
 2.  Differences				|vim9-differences|
 3.  New style functions			|fast-functions|
 4.  Types				|vim9-types|
-5.  Namespace, Import and Export	|vim9script|
-6.  Classes and interfaces		|vim9-classes|
+5.  Generic functions			|generic-functions|
+6.  Namespace, Import and Export	|vim9script|
+7.  Classes and interfaces		|vim9-classes|
 
-9.  Rationale				|vim9-rationale|
+8.  Rationale				|vim9-rationale|
 
 ==============================================================================
 
@@ -1895,7 +1896,146 @@ corresponding empty value.
 
 ==============================================================================
 
-5. Namespace, Import and Export
+						*generic-functions*
+5. Generic functions
+
+A generic function allows using the same function with different type
+arguments, while retaining type checking for arguments and the return value.
+This provides type safety and code reusability.
+
+Declaration~
+						*generic-function-declaration*
+						*E1553* *E1554* *E1559*
+The type parameters for a generic function are declared in angle brackets "<"
+and ">" directly after the function name.  Multiple type names are separated
+by commas: >
+
+    def[!] {funcname}<{type} [, {types}]>([arguments])[: {return-type}]
+	{function body}
+    enddef
+<
+These type parameters can then be used like any other type within the function
+signature and body.  Example: >
+
+    def MyFunc<T, A, B>(param1: T): T
+	var f: A
+	var x = param1
+	return x
+    enddef
+<
+						*type-variable-naming* *E1552*
+The convention is to use a single uppercase letter for a type variable (e.g.,
+T, A, X), although longer names are allowed.  The name must start with an
+uppercase letter.
+
+						*E1558* *E1560*
+A function must be declared and used either as generic or as a regular
+function - but not both.
+
+						*E1561*
+A type variable name must not conflict with other defined names, such as class
+names, type aliases, enum names, function names or other type variable names.
+
+Calling a generic function~
+						*generic-function-call*
+To call a generic function, specify the concrete types in "<" and ">"
+between the function name and the argument list: >
+
+    MyFunc<number, string, list<number>>()
+<
+						*E1555* *E1556* *E1557*
+The number of concrete types provided when calling a generic function must
+match the number of type variables in the function.  An empty type list is not
+allowed.  Any Vim9 type (|vim9-types|) can be used as a concrete type in a
+generic function.
+
+Spaces are not allowed between the function name and "<", or between ">" and
+the opening "(".
+
+A generic function can be exported and imported like a regular function.
+See |:export| and |:import|.
+
+A generic function can be defined inside another regular or generic function.
+
+Referencing type variables in generic types~
+
+Instead of concrete types, type variables can be used with generic types.
+This is useful for complex data structures like lists of dictionaries or
+dictionaries of lists.  Example: >
+
+    vim9script
+
+    def Flatten<T>(x: list<list<T>>): list<T>
+	var result: list<T> = []
+	for inner in x
+	    result += inner
+	endfor
+	return result
+    enddef
+
+    echo Flatten<number>([[1, 2], [3]])
+<
+
+Generic class method~
+
+A Vim9 class method can be a generic function: >
+
+    class A
+	def Foo<X, Y>()
+	enddef
+    endclass
+    var a = A.new()
+    a.Foo<number, string>()
+<
+						*E1432* *E1433* *E1434*
+A generic class method in a base class can be overridden by a generic method
+in a child class. The number of type variables must match between both
+methods.  A concrete class method cannot be overridden by a generic method,
+and vice versa.
+
+Generic function reference~
+
+A function reference (|Funcref|) can be a generic function.  This allows for
+creating factories of functions that operate on specific types: >
+
+    vim9script
+
+    def MakeEcho<T>(): func(T): T
+	return (x: T): T => x
+    enddef
+
+    var EchoNumber = MakeEcho<number>()
+    echo EchoNumber(123)
+
+    var EchoString = MakeEcho<string>()
+    echo EchoString('abc')
+<
+Compiling and Disassembling Generic functions~
+
+The |:defcompile| command can be used to compile a generic function with a
+specific list of concrete types: >
+
+    defcompile MyFunc<number, list<number>, dict<string>>
+<
+The |:disassemble| command can be used to list the instructions generated for
+a generic function: >
+
+    disassemble MyFunc<string, dict<string>>
+    disassemble MyFunc<number, list<blob>>
+<
+Limitations and Future Work~
+
+Currently, Vim does not support:
+   - Type inference for type variables: All types must be explicitly specified
+     when calling a generic function.
+   - Type constraints: It's not possible to restrict a type variable to a
+     specific class or interface (e.g., `T extends SomeInterface`).
+   - Default type arguments: Providing a default type for a type parameter
+     when not explicitly specified.
+
+==============================================================================
+
+6. Namespace, Import and Export
 					*vim9script* *vim9-export* *vim9-import*
 
 A Vim9 script can be written to be imported.  This means that some items are
@@ -2174,7 +2314,7 @@ Or: >
 
 ==============================================================================
 
-6. Classes and interfaces				*vim9-classes*
+7. Classes and interfaces				*vim9-classes*
 
 In legacy script a Dictionary could be used as a kind-of object, by adding
 members that are functions.  However, this is quite inefficient and requires
@@ -2188,7 +2328,7 @@ functionality it is located in a separate help file: |vim9class.txt|.
 
 ==============================================================================
 
-9. Rationale						*vim9-rationale*
+8. Rationale						*vim9-rationale*
 
 The :def command ~
 
