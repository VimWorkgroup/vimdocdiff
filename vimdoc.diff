diff --git a/runtime/doc/builtin.txt b/runtime/doc/builtin.txt
index 7389a86b9..b37a08e21 100644
--- a/runtime/doc/builtin.txt
+++ b/runtime/doc/builtin.txt
@@ -1,4 +1,4 @@
-*builtin.txt*	For Vim version 9.1.  Last change: 2025 Oct 14
+*builtin.txt*	For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -13061,7 +13061,6 @@ channel			Compiled with support for |channel| and |job|
 cindent			Compiled with 'cindent' support. (always true)
 clientserver		Compiled with remote invocation support |clientserver|.
 clipboard		Compiled with 'clipboard' support.
-clipboard_provider	Compiled with |clipboard-providers| support
 clipboard_working	Compiled with 'clipboard' support and it can be used.
 cmdline_compl		Compiled with |cmdline-completion| support.
 cmdline_hist		Compiled with |cmdline-history| support.
diff --git a/runtime/doc/eval.txt b/runtime/doc/eval.txt
index 0f81f4d6b..3ec387d1b 100644
--- a/runtime/doc/eval.txt
+++ b/runtime/doc/eval.txt
@@ -1,4 +1,4 @@
-*eval.txt*	For Vim version 9.1.  Last change: 2025 Oct 18
+*eval.txt*	For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -38,7 +38,6 @@ a remark is given.
 12. The sandbox			|eval-sandbox|
 13. Textlock			|textlock|
 14. Vim script library		|vim-script-library|
-15. Clipboard providers		|clipboard-providers|
 
 Testing support is documented in |testing.txt|.
 Profiling is documented at |profiling|.
@@ -2246,17 +2245,10 @@ v:clipmethod	The current method of accessing the clipboard that is being
 		used.  Can either have the value of:
 			wayland		The Wayland protocol is being used.
 			x11		X11 selections are being used.
-			gui		GUI specific method is being used
-			other		Some other method is being used
-			none		Clipboard functionality is disabled or
-					unavailable.
+			none		The above methods are unavailable or
+					cannot be used.
 		See 'clipmethod' for more details.
 
-					*v:clipproviders*
-v:clipproviders
-		A dictionary containing clipboard providers, see
-		|clipboard-providers| for more information.
-
 					*v:cmdarg* *cmdarg-variable*
 v:cmdarg	This variable is used for two purposes:
 		1. The extra arguments given to a file read/write command.
@@ -5269,134 +5261,5 @@ Usage: >vim
 	:call dist#vim9#Launch(<args>)
 	:Launch <app> <args>.
 <
-==============================================================================
-15. Clipboard providers					*clipboard-providers*
-
-When Vim is compiled with the |+clipboard_provider| feature, which requires
-the |+eval| feature, creating custom clipboards is possible.  These providers
-handle the "+" and "*" registers.  Note that if |+wayland_clipboard| or
-|+xterm_clipboard| features are not compiled in, then the "+" register will
-not be available.
-
-To add a provider, add a new entry to the |v:clipproviders| dictionary, in the
-format of: >
-	let v:clipproviders["name"] = {
-            \   "available": function("Available"),
-            \   "paste": {
-            \       '+': function("Paste"), " For the + register
-            \       '*': function("Paste"), " For the * register
-            \   },
-            \   "copy": {
-            \       '+': function("Copy"), " Same thing as above
-            \       '*': function("Copy"),
-            \   },
-            \ }
-
-The key is the provider name, which should be used in 'clipmethod', for
-example in the following example, you would add "name" to 'clipmethod' in
-order to use it. >
-	set clipmethod=name,wayland,x11,gui
-
-Each callback can either be a name of a function in a string, a |Funcref|, or
-a |lambda| expression.
-
-Note that these dictionary entries are optional, for example, if you don't
-care about the "copy" functions, then you can simply exclude them.  When Vim
-yanks/copies something, then simply nothing will be done.
-
-						*clipboard-provider-available*
-The "available" callback should return a string, which should contain which
-clipboard registers are available.  For example, if the "+" register is only
-available, then the function would return "+", or if both "+" and "*" are
-available, then return "+*".
-
-						*clipboard-provider-paste*
-The "paste" callback takes a first argument which is the register being put
-(string), and a second argument which is the type of access (string).  It
-should return either a tuple/list or string.  If a tuple/list is returned, it
-should have two elements:
-	- The register type conforming to |setreg()|.
-	- A list of strings
-If the register type is an empty string, then the type is automatically
-chosen, see |setreg()|.  If a string is returned, then it can either be "clear"
-or "previous".  "clear" makes Vim clear the register, and "previous" makes Vim
-use the previous register contents (or current depending on how you view it).
-
-The second argument, the access type, can either be "explicit" or "implicit".
-"explicit" means that the user is directly accessing the clipboard, such as
-putting text, or calling |getreg()|;  "implicit" means that the clipboard is
-being accessed indirectly, such when |:registers| is called, or when an
-unrelated operation causes Vim to access the clipboard.
-
-This is useful since some operations in Vim implicity access the clipboard
-indirectly.  For example, if when you want to create a provider for the OSC52
-command (accessing the clipboard via an escape code).  Many terminals show a
-confirmation if you want Vim to access the clipboard.  This can be very
-annoying with the terminal asking for permission everytime you do something
-that accesses the clipboard behind the scenes.  A good way to handle implicit
-access is to return "previous", which leaves the register contents unchanged.
-
-						*clipboard-provider-copy*
-The "copy" callback returns nothing, and takes the given arguments in order:
-	- The register being operated on
-	- The register type, conforming to |getregtype()|
-	- A list of strings to copy
-
-The provider can do whatever it wants with the given information.  This
-function is called on every request to change the clipboard register(s).
-
-						*clipboard-provider-textlock*
-In both the "paste" and "copy" callbacks, it is not allowed to change the
-buffer text, see |textlock|.
-
-						*clipboard-provider-example*
-Here is an example script that uses the clipboard provider feature through the
-OSC52 command: >vim
-
-	func Available()
-	  return "*"
-	endfunc
-
-	func Paste(reg, type)
-	  " If implicit access, don't do anything
-	  if a:type == "implicit"
-	    return "previous"
-	  endif
 
-	  augroup OSC
-	    autocmd!
-	    autocmd TermResponseAll osc ++once call feedkeys("\<F30>", '!')
-	  augroup END
-
-	  " Send command
-	  call echoraw("\<Esc>]52;;?\<Esc>\\")
-
-	  " Wait until autocmd is triggered
-	  while getchar(-1) != "\<F30>"
-	  endwhile
-
-	  autocmd! OSC
-
-	  " Extract the base64 stuff
-	  let l:stuff = matchstr(v:termosc, '52;.\+;\zs[A-Za-z0-9+/=]\+')
-
-	  return ("", blob2str(base64_decode(l:stuff)))
-	endfunc
-
-	func Copy(reg, type, lines)
-	  call echoraw("\<Esc>]52;c;" ..
-	    \ base64_encode(str2blob(a:lines)) .. "\<Esc>\\")
-	endfunc
-	let v:clipproviders["myosc"] = {
-	    \   "available": function("Available"),
-	    \   "paste": {
-	    \     '*': function("Paste")
-	    \   },
-	    \   "copy": {
-	    \     '*': function("Copy")
-	    \   },
-	    \ }
-	set clipmethod=myosc
-
-<
  vim:tw=78:ts=8:noet:ft=help:norl:
diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 837edfe81..65a6359ce 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -1,4 +1,4 @@
-*options.txt*	For Vim version 9.1.  Last change: 2025 Oct 25
+*options.txt*	For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@@ -1907,35 +1907,30 @@ A jump table for the options with a short description can be found at |Q_op|.
 			{pattern}, this must be the last entry.
 
 						*'clipmethod'* *'cpm'*
-'clipmethod' 'cpm'	string	(default for Unix: "wayland,x11,gui,other",
-				 for VMS: "x11,gui,other",
-				 otherwise: "gui,other")
+'clipmethod' 'cpm'	string	(default for Unix: "wayland,x11",
+				 for VMS: "x11",
+				 otherwise: "")
 			global
-			{only when the |+clipboard| feature is included}
+			{only when the |+xterm_clipboard| or
+			|+wayland_clipboard| features are included}
 	Specifies which method of accessing the system clipboard is used,
 	depending on which method works first or is available.  Supported
 	methods are:
 		wayland		Wayland selections
 		x11		X11 selections
-		gui		GUI specific method
-		other		Some other method
-		*		Clipboard provider method
 
-	Note: "other" is used on systems without X11/Wayland, such as
-	MS-Windows or MacOS, when running Vim without the GUI.
-
-	Note that the name of the clipboard provider should be used when you
-	want to use a clipboard provider.  See |clipboard-providers| for more
-	information.
+	Note: This option is ignored when either the GUI is running or if Vim
+	is run on a system without Wayland or X11 support, such as Windows or
+	macOS.  The GUI or system way of accessing the clipboard is always
+	used instead.
 
 	The option value is a list of comma separated items.  The list is
 	parsed left to right in order, and the first method that Vim
 	determines is available or is working is used as the actual method for
-	accessing the clipboard.  Setting this option to an empty value
-	disables the clipboard functionality on all systems.
+	accessing the clipboard.
 
-	The current method that is being used can be found in the
-	|v:clipmethod| variable.
+	The current method that is being used can be found in the |v:clipmethod|
+	variable.
 
 						*'cmdheight'* *'ch'*
 'cmdheight' 'ch'	number	(default 1)
diff --git a/runtime/doc/various.txt b/runtime/doc/various.txt
index c7ed02764..8b245b38c 100644
--- a/runtime/doc/various.txt
+++ b/runtime/doc/various.txt
@@ -1,4 +1,4 @@
-*various.txt*   For Vim version 9.1.  Last change: 2025 Oct 16
+*various.txt*   For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -378,14 +378,7 @@ m  *+channel*		inter process communication |channel|
 T  *+cindent*		'cindent', C indenting; Always enabled
 N  *+clientserver*	Unix and Win32: Remote invocation |clientserver|
    *+clipboard*		|clipboard| support compiled-in
-N  *+clipboard_provider*  |clipboard-providers| support compiled-in
    *+clipboard_working*	|clipboard| support compiled-in and working
-   *+clipboard_star_avail*
-			|clipboard| support compiled-in and star "*" register
-			available
-   *+clipboard_plus_avail*
-			|clipboard| support compiled-in and separate plus "+"
-			register available
 T  *+cmdline_compl*	command line completion |cmdline-completion|
 T  *+cmdline_hist*	command line history |cmdline-history|
 T  *+cmdline_info*	'showcmd' and 'ruler'; Always enabled since
@@ -814,10 +807,7 @@ K			Run a program to lookup the keyword under the
 :clip[reset]		Attempts to choose a new method for accessing the
 			clipboard, using the 'clipmethod' option.  This is
 			useful when the current method has become unavailable,
-			and you want to try using another method.  If the
-			|+clipboard_provider| feature is being used, this
-			command should be called after the availability of one
-			of the clipboard registers changes.
+			and you want to try using another method.
 			{only available when compiled with the |+clipboard|
 			feature}
 
diff --git a/runtime/doc/version9.txt b/runtime/doc/version9.txt
index b2a1f96b2..f40fe49fc 100644
--- a/runtime/doc/version9.txt
+++ b/runtime/doc/version9.txt
@@ -1,4 +1,4 @@
-*version9.txt*  For Vim version 9.1.  Last change: 2025 Oct 14
+*version9.txt*  For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -41653,8 +41653,6 @@ Other new features ~
 
 - |items()| function now supports Blob.
 
-- |clipboard-providers| support.
-
 							*changed-9.2*
 Changed~
 -------
@@ -41903,8 +41901,6 @@ Options: ~
 
 Vim Variables: ~
 |v:clipmethod|		The current 'clipmethod'.
-|v:clipproviders|	A dictionary containing clipboard providers
-			information.
 |v:stacktrace|		The most recent caught exception.
 |v:t_enumvalue|		Value of |enumvalue|.
 |v:t_enum|		Value of |enum| type.
@@ -41923,8 +41919,6 @@ Configure Switches: ~
 --enable-wayland-focus-steal	Enable the |wayland-focus-steal| feature.
 --enable-socketserver		Enable the |socketserver-clientserver|
 				feature.
---enable-clipboard-provider	Enable the |clipboard-providers| feature.
-
 
 ==============================================================================
 INCOMPATIBLE CHANGES					*incompatible-9.2*
diff --git a/runtime/doc/wayland.txt b/runtime/doc/wayland.txt
index da28657a1..300b9c5b9 100644
--- a/runtime/doc/wayland.txt
+++ b/runtime/doc/wayland.txt
@@ -1,4 +1,4 @@
-*wayland.txt*   For Vim version 9.1.  Last change: 2025 Oct 12
+*wayland.txt*   For Vim version 9.1.  Last change: 2025 Oct 26
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -22,7 +22,7 @@ multiple Wayland seats in the same Wayland session.
 See |gui-wayland|.  Please note that when using the GUI, Vim uses the toolkit
 such as GTK for accessing the clipboard, and does not access the clipboard
 though Wayland.  You can check this though the |v:clipmethod| variable, which
-should equal to "gui" when running the GUI.
+should equal to "none" when running the GUI.
 
 Wayland commands:
 							*:wlrestore* *:wl*
@@ -73,7 +73,7 @@ selections, see |wayland-primary-selection| for more details.
 							*wayland-persist*
 If you use X11 cut buffers, no such things exist on Wayland.  Instead to
 emulate such functionality, a separate clipboard manager must be used in order
-to persist selection data when a Wayland client exits.
+to persist selection data when a Wayland client exists.
 
 							*wayland-and-x11*
 If your version of Vim comes compiled with both X11 and Wayland support, then
