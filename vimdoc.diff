diff --git a/runtime/doc/develop.txt b/runtime/doc/develop.txt
index 84aa53dc8..d97d230e9 100644
--- a/runtime/doc/develop.txt
+++ b/runtime/doc/develop.txt
@@ -1,4 +1,4 @@
-*develop.txt*   For Vim version 9.1.  Last change: 2024 Nov 11
+*develop.txt*   For Vim version 9.1.  Last change: 2024 Dec 25
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -191,6 +191,12 @@ The basic steps to make changes to the code:
 For any non-trivial change, please always create a pull request on github,
 since this triggers the test suite.
 
+							*style-clang-format*
+sound.c and sign.c can be (semi-) automatically formated using the
+`clang-format` formatter according to the distributed .clang-format file.
+Other source files do not yet correspond to the .clang-format file.  This may
+change in the future and they may be reformatted as well.
+
 
 C COMPILER				*style-compiler* *ANSI-C* *C89* *C99*
 
diff --git a/runtime/doc/helphelp.txt b/runtime/doc/helphelp.txt
index 948ef7248..9e3e7488c 100644
--- a/runtime/doc/helphelp.txt
+++ b/runtime/doc/helphelp.txt
@@ -1,4 +1,4 @@
-*helphelp.txt*	For Vim version 9.1.  Last change: 2024 Dec 15
+*helphelp.txt*	For Vim version 9.1.  Last change: 2024 Dec 25
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -433,17 +433,38 @@ To quote a block of ex-commands verbatim, place a greater than (>) character
 at the end of the line before the block and a less than (<) character as the
 first non-blank on a line following the block.  Any line starting in column 1
 also implicitly stops the block of ex-commands before it.  E.g. >
-    function Example_Func()
-	echo "Example"
-    endfunction
+	function Example_Func()
+	  echo "Example"
+	endfunction
 <
-It's possible to add Vim syntax highlighting support to code examples.  This
-can be done by adding "vim" after the greater than (>) character (">vim").
+
+To add annotation in the block, place the annotation (ex: "lua") after a
+greater than (>) character.  E.g: >lua
+	print("hello")
+<
+Note: uses lua syntax highlighting, if "lua" key is in
+|g:help_example_languages|.
+
+It's possible to add Vim syntax highlighting support to code examples.
 E.g: >vim
-    function Example_Func()
-	echo "Example"
-    endfunction
+	function Example_Func()
+	  echo "Example"
+	endfunction
 <
+						*g:help_example_languages*
+If you want to change the syntax highlighting in the block, you can
+change it like this: >
+	:let g:help_example_languages = #{ vim: 'vim', sh: 'bash' }
+The key represents the annotation marker name, and the value is the 'syntax'
+name.  By default, help files support only Vim script highlighting.
+Note: When setting "g:help_example_languages", if you do not include "vim"
+key, the Vim syntax highlighting will not be enabled. If you set it to an
+empty value, syntax highlighting for embedded languages will be disabled.
+
+Further note: including arbitrary syntax languages into help files may not
+always work perfectly, if the included 'syntax' script does not account for
+such an import.
+						*help-notation*
 The following are highlighted differently in a Vim help file:
   - a special key name expressed either in <> notation as in <PageDown>, or
     as a Ctrl character as in CTRL-X
diff --git a/runtime/doc/os_dos.txt b/runtime/doc/os_dos.txt
index 96ef39d6f..03c88dc47 100644
--- a/runtime/doc/os_dos.txt
+++ b/runtime/doc/os_dos.txt
@@ -1,4 +1,4 @@
-*os_dos.txt*    For Vim version 9.1.  Last change: 2024 Sep 24
+*os_dos.txt*    For Vim version 9.1.  Last change: 2024 Dec 25
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -292,9 +292,9 @@ should be:
 'shellquote'	   "
 'shellxquote'						 "
 
-For Dos 16 bit this starts the shell as:
+For Dos 16 bit this starts the shell as: >
 	<shell> -c "command name" >file
-For Win32 as:
+For Win32 as: >
 	<shell> -c "command name >file"
 For DOS 32 bit, DJGPP does this internally somehow.
 
