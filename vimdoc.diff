diff --git a/runtime/doc/helphelp.txt b/runtime/doc/helphelp.txt
index 9e3e7488c..3ba092062 100644
--- a/runtime/doc/helphelp.txt
+++ b/runtime/doc/helphelp.txt
@@ -1,4 +1,4 @@
-*helphelp.txt*	For Vim version 9.1.  Last change: 2024 Dec 25
+*helphelp.txt*	For Vim version 9.1.  Last change: 2024 Dec 26
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -437,31 +437,24 @@ also implicitly stops the block of ex-commands before it.  E.g. >
 	  echo "Example"
 	endfunction
 <
-
-To add annotation in the block, place the annotation (ex: "lua") after a
-greater than (>) character.  E.g: >lua
-	print("hello")
-<
-Note: uses lua syntax highlighting, if "lua" key is in
-|g:help_example_languages|.
-
-It's possible to add Vim syntax highlighting support to code examples.
-E.g: >vim
+To enable syntax highlighting for a block of code, place a language name
+annotation (e.g. "vim") after a greater than (>) character.  E.g. >vim
 	function Example_Func()
 	  echo "Example"
 	endfunction
 <
 						*g:help_example_languages*
-If you want to change the syntax highlighting in the block, you can
-change it like this: >
-	:let g:help_example_languages = #{ vim: 'vim', sh: 'bash' }
+By default, help files only support Vim script highlighting.  If you need
+syntax highlighting for other languages, add to your |vimrc|: >
+	:let g:help_example_languages = { "vim": "vim", "sh": "bash" }
 The key represents the annotation marker name, and the value is the 'syntax'
-name.  By default, help files support only Vim script highlighting.
-Note: When setting "g:help_example_languages", if you do not include "vim"
-key, the Vim syntax highlighting will not be enabled. If you set it to an
+name.
+
+Note: If you do not include "vim" in "g:help_example_languages", its syntax
+highlighting will not be enabled.  If you set "g:help_example_languages" to an
 empty value, syntax highlighting for embedded languages will be disabled.
 
-Further note: including arbitrary syntax languages into help files may not
+Further note: Including arbitrary syntax languages into help files may not
 always work perfectly, if the included 'syntax' script does not account for
 such an import.
 						*help-notation*
@@ -481,15 +474,15 @@ You can find the details in $VIMRUNTIME/syntax/help.vim
 GENDER NEUTRAL LANGUAGE
 
 						*gender-neutral* *inclusion*
-Vim is for everybody, no matter race, gender or anything. For new or updated
-help text, gender neutral language is recommended. Some of the help text is
-many years old and there is no need to change it. We do not make any
+Vim is for everybody, no matter race, gender or anything.  For new or updated
+help text, gender neutral language is recommended.  Some of the help text is
+many years old and there is no need to change it.  We do not make any
 assumptions about the gender of the user, no matter how the text is phrased.
 The goal is that the reader understands how Vim works, the exact wording is
 secondary.
 
 Many online technical style guides include sections about gender neutral
-language. Here are a few: >
+language.  Here are a few: >
 
 	https://developers.google.com/style/pronouns
 	https://techwhirl.com/gender-neutral-technical-writing/
diff --git a/runtime/doc/pattern.txt b/runtime/doc/pattern.txt
index 6ebef9e44..39eb5442b 100644
--- a/runtime/doc/pattern.txt
+++ b/runtime/doc/pattern.txt
@@ -1,4 +1,4 @@
-*pattern.txt*   For Vim version 9.1.  Last change: 2024 Nov 09
+*pattern.txt*   For Vim version 9.1.  Last change: 2024 Dec 26
 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
@@ -1504,6 +1504,7 @@ criteria:
     - Matches at a camel case character (e.g. Case in CamelCase)
     - Matches after a path separator or a hyphen.
     - The number of unmatched characters in a string.
+    - A full/exact match is preferred.
 The matching string with the highest score is returned first.
 
 For example, when you search for the "get pat" string using fuzzy matching, it
