diff --git a/runtime/doc/builtin.txt b/runtime/doc/builtin.txt
index 00ae665f8..c1dea37ad 100644
--- a/runtime/doc/builtin.txt
+++ b/runtime/doc/builtin.txt
@@ -253,7 +253,7 @@ getreg([{regname} [, 1 [, {list}]]])
 				String or List   contents of a register
 getreginfo([{regname}])		Dict	information about a register
 getregtype([{regname}])		String	type of a register
-getscriptinfo()		List	list of sourced scripts
+getscriptinfo()			List	list of sourced scripts
 gettabinfo([{expr}])		List	list of tab pages
 gettabvar({nr}, {varname} [, {def}])
 				any	variable {varname} in tab {nr} or {def}
@@ -4089,17 +4089,21 @@ getregtype([{regname}])					*getregtype()*
 		Can also be used as a |method|: >
 			GetRegname()->getregtype()
 
-getscriptinfo()					*getscriptinfo()*
+getscriptinfo()						*getscriptinfo()*
 		Returns a |List| with information about all the sourced Vim
-		scripts in the order they were sourced. (|:scriptinfo|)
+		scripts in the order they were sourced, like what
+		`:scriptnames` shows.
 
 		Each item in the returned List is a |Dict| with the following
 		items:
 		    autoload	set to TRUE for a script that was used with
-				|import autoload| but was not actually sourced
-				yet.
+				`import autoload` but was not actually sourced
+				yet (see |import-autoload|).
 		    name	vim script file name.
 		    sid		script ID |<SID>|.
+		    sourced	script ID of the actually sourced script that
+				this script name links to, if any, otherwise
+				zero
 
 gettabinfo([{tabnr}])					*gettabinfo()*
 		If {tabnr} is not specified, then information about all the
@@ -7437,8 +7441,10 @@ search({pattern} [, {flags} [, {stopline} [, {timeout} [, {skip}]]]])
 		starts in column zero and then matches before the cursor are
 		skipped.  When the 'c' flag is present in 'cpo' the next
 		search starts after the match.  Without the 'c' flag the next
-		search starts one column further.  This matters for
-		overlapping matches.
+		search starts one column after the start of the match.  This
+		matters for overlapping matches.  See |cpo-c|.  You can also
+		insert "\ze" to change where the match ends, see  |/\ze|.
+
 		When searching backwards and the 'z' flag is given then the
 		search starts in column zero, thus no match in the current
 		line will be found (unless wrapping around the end of the
diff --git a/runtime/doc/indent.txt b/runtime/doc/indent.txt
index ade9e422c..2ebbadbf8 100644
--- a/runtime/doc/indent.txt
+++ b/runtime/doc/indent.txt
@@ -983,25 +983,38 @@ indentation: >
 PYTHON							*ft-python-indent*
 
 The amount of indent can be set for the following situations.  The examples
-given are the defaults.  Note that the variables are set to an expression, so
-that you can change the value of 'shiftwidth' later.
+given are the defaults.  Note that the dictionary values are set to an
+expression, so that you can change the value of 'shiftwidth' later.
 
 Indent after an open paren: >
-	let g:pyindent_open_paren = 'shiftwidth() * 2'
+	let g:python_indent.open_paren = 'shiftwidth() * 2'
 Indent after a nested paren: >
-	let g:pyindent_nested_paren = 'shiftwidth()'
+	let g:python_indent.nested_paren = 'shiftwidth()'
 Indent for a continuation line: >
-	let g:pyindent_continue = 'shiftwidth() * 2'
+	let g:python_indent.continue = 'shiftwidth() * 2'
+
+By default, the closing paren on a multiline construct lines up under the first
+non-whitespace character of the previous line.
+If you prefer that it's lined up under the first character of the line that
+starts the multiline construct, reset this key: >
+	let g:python_indent.closed_paren_align_last_line = v:false
 
 The method uses |searchpair()| to look back for unclosed parentheses.  This
 can sometimes be slow, thus it timeouts after 150 msec.  If you notice the
 indenting isn't correct, you can set a larger timeout in msec: >
-	let g:pyindent_searchpair_timeout = 500
+	let g:python_indent.searchpair_timeout = 500
 
 If looking back for unclosed parenthesis is still too slow, especially during
 a copy-paste operation, or if you don't need indenting inside multi-line
 parentheses, you can completely disable this feature: >
-	let g:pyindent_disable_parentheses_indenting = 1
+	let g:python_indent.disable_parentheses_indenting = 1
+
+For backward compatibility, these variables are also supported: >
+	g:pyindent_open_paren
+	g:pyindent_nested_paren
+	g:pyindent_continue
+	g:pyindent_searchpair_timeout
+	g:pyindent_disable_parentheses_indenting
 
 
 R								*ft-r-indent*
diff --git a/runtime/doc/repeat.txt b/runtime/doc/repeat.txt
index f9d0b6698..f8602ba8c 100644
--- a/runtime/doc/repeat.txt
+++ b/runtime/doc/repeat.txt
@@ -417,6 +417,10 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 			For a script that was used with `import autoload` but
 			was not actually sourced yet an "A" is shown after the
 			script ID.
+			For a script that was referred to by one name but
+			after resolving symbolic links got sourced with
+			another name the other script is after "->".  E.g.
+			"20->22" means script 20 was sourced as script 22.
 			{not available when compiled without the |+eval|
 			feature}
 
diff --git a/runtime/doc/terminal.txt b/runtime/doc/terminal.txt
index 56f0dc82d..0b94f8a04 100644
--- a/runtime/doc/terminal.txt
+++ b/runtime/doc/terminal.txt
@@ -1022,8 +1022,10 @@ create a security problem.
 						*terminal-autoshelldir*
 This can be used to pass the current directory from a shell to Vim.
 Put this in your .vimrc: >
-	def g:Tapi_lcd(_, args: string)
-	    execute 'silent lcd ' .. args
+	def g:Tapi_lcd(_, path: string)
+	    if isdirectory(path)
+                execute 'silent lcd ' .. fnameescape(path)
+            endif
 	enddef
 <
 And, in a bash init file: >
diff --git a/runtime/doc/textprop.txt b/runtime/doc/textprop.txt
index 9a148455e..996cdd197 100644
--- a/runtime/doc/textprop.txt
+++ b/runtime/doc/textprop.txt
@@ -126,6 +126,7 @@ prop_add({lnum}, {col}, {props})
 		If {col} is invalid an error is given. *E964*
 
 		{props} is a dictionary with these fields:
+		   type		name of the text property type
 		   length	length of text in bytes, can only be used
 				for a property that does not continue in
 				another line; can be zero
@@ -142,9 +143,10 @@ prop_add({lnum}, {col}, {props})
 				automatically to a negative number; otherwise
 				zero is used
 		   text		text to be displayed before {col}, or after the
-				line if {col} is zero
+				line if {col} is zero; prepend and/or append
+				spaces for padding with highlighting
 		   					*E1294*
-		   text_align	when "text" is present and {col} is zero
+		   text_align	when "text" is present and {col} is zero;
 				specifies where to display the text:
 				   after   after the end of the line
 				   right   right aligned in the window (unless
@@ -152,14 +154,20 @@ prop_add({lnum}, {col}, {props})
 					   line)
 				   below   in the next screen line
 				When omitted "after" is used.  Only one
-				"right" property can fit in earch line.
+				"right" property can fit in each line, if
+				there are two ore more these will go in a
+				separate line (still right aligned).
+		   text_padding_left				*E1296*
+				used when "text" is present and {col} is zero;
+				padding between the end of the text line
+				(leftmost column for "below") and the virtual
+				text, not highlighted
 		   text_wrap	when "text" is present and {col} is zero,
 				specifies what happens if the text doesn't
 				fit:
 				   wrap      wrap the text to the next line
 				   truncate  truncate the text to make it fit
 		   		When omitted "truncate" is used.
-		   type		name of the text property type
 		All fields except "type" are optional.
 
 		It is an error when both "length" and "end_lnum" or "end_col"
@@ -352,11 +360,16 @@ prop_remove({props} [, {lnum} [, {lnum-end}]])
 		{props} is a dictionary with these fields:
 		   id		remove text properties with this ID
 		   type		remove text properties with this type name
-		   both		"id" and "type" must both match
+		   types	remove text properties with type names in this
+				List
+		   both		"id" and "type"/"types" must both match
 		   bufnr	use this buffer instead of the current one
 		   all		when TRUE remove all matching text properties,
 				not just the first one
-		A property matches when either "id" or "type" matches.
+		Only one of "type" and "types" may be supplied. *E1295*
+
+		A property matches when either "id" or one of the supplied
+		types matches.
 		If buffer "bufnr" does not exist you get an error message.
 		If buffer "bufnr" is not loaded then nothing happens.
 
diff --git a/runtime/doc/todo.txt b/runtime/doc/todo.txt
index 4982498af..a4f3a288f 100644
--- a/runtime/doc/todo.txt
+++ b/runtime/doc/todo.txt
@@ -38,9 +38,6 @@ browser use: https://github.com/vim/vim/issues/1234
 							*known-bugs*
 -------------------- Known bugs and current work -----------------------
 
-Text props: Add "padding" argument - only for when using "text" and {col} is
-zero.  Use tp_len field and n_attr_skip. #10906
-
 Further Vim9 improvements, possibly after launch:
 - Use Vim9 for more runtime files.
 - Check performance with callgrind and kcachegrind.
@@ -244,6 +241,9 @@ MS-Windows: did path modifier :p:8 stop working?  #8600
 Version of getchar() that does not move the cursor - #10603 Use a separate
 argument for the new flag.
 
+Add "lastline" entry to 'fillchars' to specify a character instead of '@'.
+#10963
+
 test_arglist func Test_all_not_allowed_from_cmdwin() hangs on MS-Windows.
 
 Information for a specific terminal (e.g. gnome, tmux, konsole, alacritty) is
diff --git a/runtime/doc/usr_41.txt b/runtime/doc/usr_41.txt
index 4e210a65a..57cdb11e8 100644
--- a/runtime/doc/usr_41.txt
+++ b/runtime/doc/usr_41.txt
@@ -1349,7 +1349,7 @@ Various:					*various-functions*
 	did_filetype()		check if a FileType autocommand was used
 	eventhandler()		check if invoked by an event handler
 	getpid()		get process ID of Vim
-	getscriptinfo()	get list of sourced vim scripts
+	getscriptinfo()		get list of sourced vim scripts
 	getimstatus()		check if IME status is active
 	interrupt()		interrupt script execution
 	windowsversion()	get MS-Windows version
diff --git a/runtime/doc/various.txt b/runtime/doc/various.txt
index 13e73e343..62a9b203a 100644
--- a/runtime/doc/various.txt
+++ b/runtime/doc/various.txt
@@ -332,7 +332,8 @@ g8			Print the hex values of the bytes used in the
    *+ARP*		Amiga only: ARP support included
 B  *+arabic*		|Arabic| language support
 B  *+autochdir*		support 'autochdir' option
-T  *+autocmd*		|:autocmd|, automatic commands
+T  *+autocmd*		|:autocmd|, automatic commands.  Always enabled since
+			8.0.1564
 H  *+autoservername*	Automatically enable |clientserver|
 m  *+balloon_eval*	|balloon-eval| support in the GUI. Included when
 			compiling with supported GUI (Motif, GTK, GUI) and
diff --git a/runtime/doc/vim9.txt b/runtime/doc/vim9.txt
index 089cb8f8e..5d1a82301 100644
--- a/runtime/doc/vim9.txt
+++ b/runtime/doc/vim9.txt
@@ -1823,7 +1823,7 @@ defined.  This does not apply to autoload imports, see the next section.
 
 
 Importing an autoload script ~
-							*vim9-autoload*
+					*vim9-autoload* *import-autoload*
 For optimal startup speed, loading scripts should be postponed until they are
 actually needed.  Using the autoload mechanism is recommended:
 							*E1264*
diff --git a/runtime/doc/windows.txt b/runtime/doc/windows.txt
index 595147301..5c648971f 100644
--- a/runtime/doc/windows.txt
+++ b/runtime/doc/windows.txt
@@ -183,6 +183,8 @@ CTRL-W v						*CTRL-W_v*
 		3. 'eadirection' isn't "ver", and
 		4. one of the other windows is wider than the current or new
 		   window.
+		If N was given make the new window N columns wide, if
+		possible.
 		Note: In other places CTRL-Q does the same as CTRL-V, but here
 		it doesn't!
 
